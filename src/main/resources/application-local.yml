spring:
  config:
    activate:
      on-profile: local
    import: optional:configserver:http://127.0.0.1:8888
  # rabbitmq settings
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest
  # kafka settings
  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      # 컨슈머 그룹 지정 - 컨슈머 그룹안의 하나의 컨슈머가 다운되더라도 컨슈머 그룹 안의 다른 컨슈머가 읽을 수 있도록 함 또한 Offset으로 재시작시 메시지 관리 가능
      group-id: delivery-service
      # Kafka consumer가 다운되었을 때 가장 빠른 컨슈머 오프셋을 가지는 것 부터 읽는다.
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    listener:
      ack-mode: manual
  # h2 settings
  h2:
    console:
      enabled: true
      settings:
        web-allow-others: true
      path: /h2-console
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:delivery-service;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false;MODE=MySQL
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: true
    generate-ddl: true
    # Bean이 생성되기 전에 ddl 실행
    defer-datasource-initialization: true
eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://127.0.0.1:8761/eureka
  instance:
    instance-id: ${spring.application.name}:${server.port}

cloud:
  aws:
    credentials:
      ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    region:
      static: ap-northeast-2
    stack:
      auto: false
    sqs:
      delivery-start-notification-queue:
        name: delivery-start-notification-queue.fifo
        url: ${AWS_SQS_ENDPOINT}/delivery-start-notification-queue.fifo
